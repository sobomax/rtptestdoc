get_epname()
{
  grep METHOD_ENTRY "${1}" | sed 's|.*METHOD_ENTRY[(]|| ; s|[)].*||' | \
   grep "${2}," | awk -F ',' '{print $2}' | sed 's|^[ ]*||'
}

emit_finfunction()
{
  mname="${1}"
  epname="${2}"
  oname="${3}"
  echo "static void ${mname}_fin(void *pub) {"
  echo "    fprintf(stderr, \"Method ${oname}@%p::${epname} (${mname}) is invoked after destruction\\x0a\", pub);"
  echo "    RTPP_AUTOTRAP();"
  echo "}"
}

get_onames()
{
  grep ^DEFINE_METHOD "${1}" | sed 's|^DEFINE_METHOD[(]||' | \
   awk -F ',' '{print $1}' | LC_ALL=C sort -u
}

get_mnames_all()
{
  grep ^DEFINE_METHOD "${1}" | sed 's|^DEFINE_METHOD[(]||' | \
   awk -F ',' '{print $2}' | sed 's|^[ ]*||' | LC_ALL=C sort -u
}

get_mnames() {
  grep ^DEFINE_METHOD "${1}" | sed 's|^DEFINE_METHOD[(]||' | \
   grep "${2}," | awk -F ',' '{print $2}' | sed 's|^[ ]*||' | \
   LC_ALL=C sort
}

emit_fin_h() {
  HDEFNAME=`echo _${2} | sed 's|[.]|_|g'`
  echo   "/* Auto-generated by ${GENRNAME} - DO NOT EDIT! */"
  echo   "#if !defined(${HDEFNAME})"
  echo   "#define ${HDEFNAME}"
  echo   "#if !defined(RTPP_AUTOTRAP)"
  echo   "#define RTPP_AUTOTRAP() abort()"
  echo   "#else"
  echo   "extern int _naborts;"
  echo   "#endif"
  for oname in ${ONAMES}
  do
    echo "void ${oname}_fin(struct ${oname} *);"
  done
  echo   "#if defined(RTPP_FINTEST)"
  for oname in ${ONAMES}
  do
    echo "void ${oname}_fintest(void);"
  done
  echo   "#endif /* RTPP_FINTEST */"
  echo   "#endif /* ${HDEFNAME} */"
}

emit_fintestfunction() {
  oname="${2}"
  mnames="${3}"
  static="${4}"

  echo   "void"
  echo   "${oname}_fintest()"
  echo   "{"
  echo   "    int naborts_s;"
  echo   ""
  echo   "    struct {"
  echo   "        struct ${oname} pub;"
  echo   "    } *tp;"
  echo   ""
  echo   "    naborts_s = _naborts;"
  echo   "    tp = rtpp_rzmalloc(sizeof(*tp), offsetof(typeof(*tp), pub.rcnt));"
  echo   "    assert(tp != NULL);"
  echo   "    assert(tp->pub.rcnt != NULL);"
  if [ ${static} -ne 0 ]
  then
    echo "    static const struct ${oname}_smethods dummy = {"
  fi
  for mname in ${mnames}
  do
    epname=`get_epname "${1}" "${mname}"`
    if [ ${static} -eq 0 ]
    then
      echo "    tp->pub.${epname} = (${mname}_t)((void *)0x1);"
    else
      echo "        .${epname} = (${mname}_t)((void *)0x1),"
    fi
  done
  if [ ${static} -ne 0 ]
  then
    echo "    };"
    echo "    tp->pub.smethods = &dummy;"
  fi
  echo   "    CALL_SMETHOD(tp->pub.rcnt, attach, (rtpp_refcnt_dtor_t)&${oname}_fin,"
  echo   "      &tp->pub);"
  echo   "    CALL_SMETHOD(tp->pub.rcnt, decref);"
  i=0
  for mname in ${mnames}
  do
    epname=`get_epname "${1}" "${mname}"`
    echo "    CALL_TFIN(&tp->pub, ${epname});"
    i=$((${i} + 1))
  done
  echo   "    assert((_naborts - naborts_s) == ${i});"
  echo   "}"
  echo   "const static void *_${oname}_ftp = (void *)&${oname}_fintest;"
  echo   "DATA_SET(rtpp_fintests, _${oname}_ftp);"
}

emit_fintestsection() {
  ONAMES="${2}"
  static="${3}"
  echo   "#if defined(RTPP_FINTEST)"
  echo   "#include <assert.h>"
  echo   "#include <stddef.h>"
  echo   "#include \"rtpp_mallocs.h\""
  echo   "#include \"rtpp_refcnt.h\""
  echo   "#include \"rtpp_linker_set.h\""
  if [ ${static} -eq 0 ]
  then
    echo "#define CALL_TFIN(pub, fn) ((void (*)(typeof(pub)))((pub)->fn))(pub)"
  else
    echo "#define CALL_TFIN(pub, fn) ((void (*)(typeof(pub)))((pub)->smethods->fn))(pub)"
  fi
  echo   ""
  for oname in ${ONAMES}
  do
    MNAMES=`get_mnames ${1} ${oname}`
    emit_fintestfunction ${1} "${oname}" "${MNAMES}" "${static}"
  done
  echo   "#endif /* RTPP_FINTEST */"
}

ONAMES=`get_onames ${1}`
MNAMES_ALL=`get_mnames_all ${1}`

GENRNAME="`basename "${0}"`"
