<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- Use the following command to generate rtpproxy.8: -->
<!-- xsltproc /usr/local/share/xsl/docbook/manpages/docbook.xsl manpage.xml -->
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!-- Please adjust the date whenever revising the manpage. -->
<!ENTITY dhdate "<date>May 16, 2019</date>">
<!-- SECTION should be 1-8, maybe w/ subsection other parameters are
      allowed: see man(7), man(1). -->
<!ENTITY dhsection "<manvolnum>8</manvolnum>">
<!ENTITY dhucpackage "<refentrytitle>rtpproxy</refentrytitle>">
<!ENTITY dhpackage "rtpproxy">
<!ENTITY janakj_firstname "Jan">
<!ENTITY janakj_surname "Janak">
<!ENTITY janakj_email "janakj@users.berlios.de">
<!ENTITY janakj_username "janakj">
<!ENTITY janakj_emtag "<email>&janakj_email;</email>">
<!ENTITY sobomax_firstname "Maksym">
<!ENTITY sobomax_surname "Sobolyev">
<!ENTITY sobomax_email "sobomax@gmail.com">
<!ENTITY sobomax_username "sobomax">
<!ENTITY sobomax_emtag "<email>&sobomax_email;</email>">
<!ENTITY dhemail "&sobomax_emtag;">
<!ENTITY dhfirstname "&sobomax_firstname;">
<!ENTITY dhsurname "&sobomax_surname;">
<!ENTITY dhusername "&sobomax_username;">
]>
<refentry>
  <refentryinfo>
    <address>
	    &dhemail;
	</address>

    <author>
      <firstname>&janakj_firstname;</firstname>

      <surname>&janakj_surname;</surname>

      &janakj_emtag;
    </author>

    <author>
      <firstname>&dhfirstname;</firstname>

      <surname>&dhsurname;</surname>

      &sobomax_emtag;
    </author>

    <copyright id="c.sobomax">
      <year>2006-20019</year>

      <holder>&dhfirstname; &dhsurname; <ulink
      url="mailto:sobomax@gmail.com">&lt;&sobomax_email;&gt;</ulink></holder>
    </copyright>

    <copyright id="c.janjanak">
      <year>2006</year>

      <holder>&janakj_firstname; &janakj_surname; <ulink
      url="mailto:janakj@users.berlios.de">&lt;&janakj_email;&gt;</ulink></holder>
    </copyright>

    &dhdate;
  </refentryinfo>

  <refmeta>
    &dhucpackage;

    &dhsection;
  </refmeta>

  <refnamediv id="refnamediv">
    <refname>&dhpackage;</refname>

    <refpurpose>RTP (Real-time Transport Protocol) Proxy Server</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <cmdsynopsis id="SYNOPSIS">
      <command>&dhpackage;</command>

      <!-- TODO "N:c:" -->

      <arg choice="opt"><option>-?</option></arg>

      <arg choice="opt"><option>-2</option></arg>

      <arg choice="opt"><option>-f</option></arg>

      <arg choice="opt"><option>-v</option></arg>

      <arg choice="opt"><option>-V</option></arg>

      <arg choice="opt"><option>-R</option></arg>

      <arg choice="opt"><option>-l</option>
      <replaceable>addr1<optional>/addr2</optional></replaceable></arg>

      <arg choice="opt"><option>-6</option>
      <replaceable>addr1<optional>/addr2</optional></replaceable></arg>

      <arg choice="opt"><option>-s</option>
      <replaceable>ctrl_socket</replaceable></arg>

      <arg choice="opt"><option>-t</option>
      <replaceable>tos</replaceable></arg>

      <arg choice="opt"><option>-p</option>
      <replaceable>pidfile</replaceable></arg>

      <arg choice="opt"><option>-T</option>
      <replaceable>max_ttl</replaceable></arg>

      <arg choice="opt"><option>-r</option> <replaceable>rdir</replaceable>
      <arg choice="opt"><option>-S</option>
      <replaceable>sdir</replaceable></arg></arg>

      <arg choice="opt"><option>-L</option>
      <replaceable>nofile_limit</replaceable></arg>

      <arg choice="opt"><option>-A</option>
      <replaceable>advaddr1<optional>/advaddr2</optional></replaceable></arg>

      <arg choice="opt"><option>-m</option>
      <replaceable>min_port</replaceable></arg>

      <arg choice="opt"><option>-M</option>
      <replaceable>max_port</replaceable></arg>

      <arg choice="opt"><option>-u</option>
      <replaceable>uname<optional>:gname</optional></replaceable></arg>

      <arg choice="opt"><option>-w</option>
      <replaceable>sock_mode</replaceable></arg>

      <arg choice="opt"><option>-F</option></arg>

      <arg choice="opt"><option>-i</option></arg>

      <arg choice="opt"><option>-n</option>
      <replaceable>timeout_socket</replaceable></arg>

      <arg choice="opt"><option>-P</option></arg>

      <arg choice="opt"><option>-a</option></arg>

      <arg choice="opt"><option>-d</option>
      <replaceable>log_level<optional>:log_facility</optional></replaceable></arg>

      <arg choice="opt"><option>-W</option>
      <replaceable>setup_ttl</replaceable></arg>
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>DESCRIPTION</title>

    <highlights id="DESCRIPTION">
      <para>The <command>&dhpackage;</command> is a generic-purpose RTP proxy
      server designed to be used in conjunction with a SIP Controller capable
      of rewriting SDP contents. OpenSIPS, Kamailio, and Sippy B2BUA support
      <command>&dhpackage;</command>.</para>

      <para>The rtpproxy can be used to facilitate RTP sessions between SIP
      user agents that are behind a NAT(s) (Network Address Translator)
      firewall. Several cases exists when direct end-to-end communication is
      not possible and RTP streams have to be relayed through another host.
      rtpproxy can be used to setup such a relaying host.</para>

      <para>The rtpproxy can also operate as a application level bridge by
      specifying two interfaces to listen on. In bridging mode rtpproxy
      forwards RTP packets received on one interface to the other interface
      and vice versa. This mode can be used to forward RTP packets between
      networks without direct network level connectivity (provided that the
      host running rtpproxy has an interface connected to both networks). One
      particular application of bridging mode is IPv4/IPv6 traversal of RTP
      packets.</para>

      <para>When instructed by the call controller rtpproxy will record the
      entire RTP session to the local hard disk, fork-off (copy) to a remote
      server and/or play a pre-recorded file to the user agent (comfort ring
      replacement, Music-on-Hold, disclaimer announcements etc).</para>

      <para>The rtpproxy tracks various important operational metrics about
      RTP sessions (calls), such as number of packets sent, received, lost,
      forwarded and so forth. Real-time metrics can then be retrieved by
      issuing appropriate command via control socket interface.</para>
    </highlights>
  </refsect1>

  <refsect1>
    <title>OPTIONS</title>

    <variablelist id="OPTIONS">
      <varlistentry>
        <term><option>-?</option></term>

        <listitem>
          <para>Show summary of options.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-2</option></term>

        <listitem>
          <para>Send every RTP packet twice in sessions that use low-bitrate
          codecs. Only packets that are smaller than 128 bytes will be sent
          twice. This option can improve audio quality on lossy links.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-f</option></term>

        <listitem>
          <para>rtpproxy will stay in foreground mode if this option is
          set.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-V</option></term>

        <listitem>
          <para>Show version of program.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-v</option></term>

        <listitem>
          <para>Show supported rtpp command protocol revisions.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-l</option>
        <replaceable>addr1<optional>/addr2</optional></replaceable></term>

        <listitem>
          <para>IPv4 listen IP address(es). You can specify either one or two
          addresses. If two addresses are specified, the rtpproxy will work in
          bridging mode.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-6</option>
        <replaceable>addr1<optional>/addr2</optional></replaceable></term>

        <listitem>
          <para>IPv6 listen IP address(es). You can specify either one or two
          addresses. If two addresses are specified, the rtpproxy will work in
          bridging mode.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-s</option>
        <replaceable>ctrl_socket</replaceable></term>

        <listitem>
          <para>This parameter configures rtpproxy control socket. The control
          socket is used by the call controller for the purpose of creating,
          modifying, and deleting RTP sessions. The control socket can also be
          used to fetch stats from the rtpproxy process, or about specific
          media sessions. Format of <replaceable>ctrl_socket</replaceable> is
          &lt;type&gt;:&lt;socket&gt;. Following types are supported:
          <itemizedlist>
              <listitem id="udp">
                <para><emphasis>udp:</emphasis> Create UDP control socket. In
                this mode rtpproxy will listen on a UDP socket for control
                messages from the call controlle.</para>

                <para>Example: -s udp:127.0.0.1:9000</para>

                <para>IP address can be '*' in which case rtpproxy will listen
                on all local interfaces. If port is omitted then port 22222
                will be used.</para>

                <note>
                  <para>rtpproxy control protocol has no built-in security
                  mechanisms. Make sure that you protect the listening IP and
                  port properly when using rtpproxy with UDP control
                  socket.</para>
                </note>
              </listitem>

              <listitem id="udp6">
                <para><emphasis>udp6:</emphasis> Create IPv6 UDP control
                socket. In this mode rtpproxy will listen on UDP/IPv6 for
                control messages from the SIP Controller.</para>

                <para>Example: -s udp6:::1:9000</para>
              </listitem>

              <listitem id="tcp">
                <para><emphasis>tcp:</emphasis> Create IPv4 TCP control
                socket. In this mode rtpproxy will listen on TCP/IPv4 for
                control messages from the SIP Controller.</para>

                <para>Example: -s tcp:192.168.0.1:9001</para>
              </listitem>

              <listitem id="tcp6">
                <para><emphasis>tcp6:</emphasis> Create IPv6 TCP control
                socket. In this mode rtpproxy will listen on TCP/IPv6 for
                control messages from the SIP Controller.</para>

                <para>Example: -s tcp6:::1:9002</para>
              </listitem>

              <listitem id="unix">
                <para><emphasis>unix:</emphasis> Create UNIX domain socket in
                a datagram-like mode for control interface. In this mode the
                SIP Controller and rtpproxy must be running on the same host.
                This is traditional mode when rtpproxy would close connection
                after processing each command and sending reply.</para>

                <para>Example: -s unix:/var/run/rtpproxy.sock</para>
              </listitem>

              <listitem id="cunix">
                <para><emphasis>cunix:</emphasis> Create UNIX domain socket
                for control interface. In this mode the SIP Controller and
                rtpproxy must be running on the same host. Similar to
                <emphasis>unix:</emphasis> above, but the rtpproxy would keep
                control socket open and accept multiple commands via the same
                connection.</para>

                <para>Example: -s cunix:/var/run/rtpproxy.sock</para>
              </listitem>
            </itemizedlist></para>

          <para>Default value is
          <filename>unix:/var/run/rtpproxy.sock</filename>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-t</option> <replaceable>tos</replaceable></term>

        <listitem>
          <para>Set ToS (Type of Service) in the outgoing IP header. Default
          value is 0xB8. Setting this parameter to -1 disables setting ToS
          resulting in operating system default ToS being used instead.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-r</option> <replaceable>rec_dir</replaceable></term>

        <listitem>
          <para>Directory to write recorded RTP sessions.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-S</option> <replaceable>spool_dir</replaceable></term>

        <listitem>
          <para>Spool directory for recording of RTP streams. When the session
          is stopped, the recording will be moved from the spool directory to
          the rec_dir directory as specified by the <option>-r</option>
          option.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-R</option></term>

        <listitem>
          <para>Prevent rtpproxy from recording RTCP when recording RTP.
          rtpproxy records RTCP by default when RTP recording is
          enabled.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-p</option> <replaceable>pid_file</replaceable></term>

        <listitem>
          <para>This parameter configures the name of the file where PID of
          running rtpproxy will be stored. Default is
          <filename>/var/run/rtpproxy.pid</filename>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-T</option> <replaceable>max_ttl</replaceable></term>

        <listitem>
          <para>Specify the RTP inactivity timer. Defaults to 60
          seconds.</para>

          <para>If the rtpproxy does not receive any RTP packets for more than
          <replaceable>max_ttl</replaceable> it will then delete the
          session.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-L</option>
        <replaceable>nofile_limit</replaceable></term>

        <listitem>
          <para>Set the maximum number of open file descriptors per process.
          The default maximum is set by the operating system, and can be
          overridden using the <option>-L</option> flag.</para>

          <para>The rtpproxy requires four file descriptors per session to
          ensure that it can reliably identify where each stream is coming
          from in a NAT firewall scenario.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-A</option>
        <replaceable>advaddr1<optional>/advaddr2</optional></replaceable></term>

        <listitem>
          <para>Set advertised address of rtpproxy. Useful if the rtpproxy is
          behind a NAT firewall. (Amazon EC2) When the rtpproxy receives a
          session request from a SIP controller it will return the IP
          address(es) specified by the <option>-A</option> option.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-m</option> <replaceable>min_port</replaceable></term>

        <listitem>
          <para>Set lower limit on UDP ports range that the rtpproxy uses for
          RTP/RTCP sessions to <replaceable>min_port</replaceable>. Default is
          35000.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-M</option> <replaceable>max_port</replaceable></term>

        <listitem>
          <para>Set upper limit on UDP ports range that the rtpproxy uses for
          RTP/RTCP sessions to <replaceable>max_port</replaceable>. Default is
          65000.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-u</option>
        <replaceable>uname<optional>:gname</optional></replaceable></term>

        <listitem>
          <para>Switch rtpproxy to UID identified by the
          <replaceable>uname</replaceable> and optional GID identified by
          <replaceable>gname</replaceable> when proxy is up and
          running.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-w</option> <replaceable>sock_mode</replaceable></term>

        <listitem>
          <para>Set access mode for the controlling UNIX-socket (if used).
          Only applies if rtpproxy runs under a different GID using
          <option>-u</option> option.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-F</option></term>

        <listitem>
          <para>By default the rtpproxy will warn user if running as superuser
          (UID 0) in local control mode and refuse to run in remote control
          mode at all. This switch removes the check.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-i</option></term>

        <listitem>
          <para>Enable independent RTP activity timeout mode. By default, a
          timeout (which results in automatic destruction of the session) can
          only occur if no RTP packets are received on any of the session's
          ports. This option, if set, varies that behaviour, such that a
          timeout will occur if packets are still being received on one port
          but not the other. The option should be used with caution since in
          some cases it's perfectly fine to have packets coming from only one
          side of conversation (i.e. when the second party has muted its
          audio).</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-n</option>
        <replaceable>timeout_socket</replaceable></term>

        <listitem>
          <para>This parameter specifies permitted notification sockets only.
          The listening socket must be created by another application,
          preferably before starting rtpproxy.</para>

          <para>Timeout notifications must be enabled by the SIP controller
          when setting up the session. The SIP Controller must specify the
          timeout_socket, and a notify_tag, which is expected to be an
          arbitrary string that can be used by the SIP controller to identify
          which session a received time out notification relates to.</para>

          <para>If a SIP Controller specifies a notification socket for a
          session, and that socket is not specified using the
          <option>-n</option> flag, the rtpproxy will not send a notification,
          and will not produce an error. It will ignore the notification
          request.</para>

          <para>Format of <replaceable>timeout_socket</replaceable> is
          &lt;type&gt;:&lt;socket&gt;. Following types are supported:
          <itemizedlist>
              <listitem>
                <para><emphasis>unix:</emphasis> Connect to UNIX domain socket
                for sending timeout notifications. In this mode B2BUA and
                rtpproxy must be running on the same host.</para>

                <para>Example: -n unix:/var/run/rtpproxy_timeout.sock</para>
              </listitem>

              <listitem>
                <para><emphasis>tcp:</emphasis> Connect to a remote host using
                TCP/IP for sending timeout notifications. Format of the
                <replaceable>socket</replaceable> parameter in this case is
                &lt;host&gt;:&lt;port&gt;.</para>

                <para>Example: -n tcp:10.20.30:12345</para>
              </listitem>
            </itemizedlist></para>

          <para>There is no default value, notifications are not sent and not
          permitted unless a value is specified explicitly. Multiple
          notification sockets can be provided by specifying the
          <option>-n</option> flag more than once.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-P</option></term>

        <listitem>
          <para>Record sessions using libpcap file format instead of
          non-standard ad-hoc format. The libpcap format, which is the
          de-facto standard for packet capturing software, has the advantage
          of being compatible with numerous third-party tools and utilities,
          such as tcpdump or Wireshark. The drawback of libpcap is slightly
          larger overhead (extra 12 bytes for every saved RTP packet for
          IPv4).</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-a</option></term>

        <listitem>
          <para>Record all sessions going through the rtpproxy
          unconditionally. By default rtpproxy expects the SIP controller to
          enable recording on a per-session basis.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-d</option>
        <replaceable>log_level<optional>:log_facility</optional></replaceable></term>

        <listitem>
          <para>Configures the verbosity level of the log output. Possible
          <replaceable>log_level</replaceable> values in the order from the
          most verbose to the least verbose are: DBUG, INFO, WARN, ERR and
          CRIT.</para>

          <para>The optional <replaceable>log_facility</replaceable> parameter
          sets syslog(3) facility assigned to log messages.</para>

          <para>Example: -d WARN:LOG_LOCAL5</para>

          <para>The default level in foreground mode is is DBUG, in background
          - WARN and facility is LOG_DAEMON.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>PRINCIPLES OF OPERATION</title>

    <para>When the SIP controller receives an INVITE request, it extracts the
    Call-ID and from_tag from INVITE. The call controller communicates it with
    the rtpproxy via Unix domain socket or a UDP socket. rtpproxy looks for an
    existing session with the given Call-ID and from_tag.</para>

    <para>If rtpproxy finds a session that is already associated with the
    given Call-ID, it will return the UDP port number that is already
    associated with that session.</para>

    <para>If the given Call-ID and from_tag is not associated with an existing
    session, it will create a new session by randomly choosing a free UDP port
    from the usable UDP port range. The UDP port number will be provided as a
    response to the SIP controllers request.</para>

    <para>The SIP controller is then expected to rewrite the SDP, replacing
    the ip:port to that of the IP address of the rtpproxy, and the port number
    allocated by the rtpproxy. The user agent reading the SDP will then send
    its RTP stream to the rtpproxy.</para>

    <para>When the SIP Controller receives a non-negative SIP reply with SDP
    it extracts the Call-ID, from_tag and to_tag from the SIP message and
    sends a request to the rtpproxy with Call-ID, from_tag and to_tag.</para>

    <para>The rtpproxy looks for an existing session based on the Call-ID and
    from_tag, which it should find. It will then randomly choose another port
    and "connect" this port with the earlier allocated port, forming the proxy
    between both sides.</para>

    <para>When the SIP controller recieves the new port number from the
    rtpproxy, the SIP controller is expected to rewrite the SDP in the SIP
    message body by replacing the ip:port to that of the IP address and new
    udp port number provided by rtpproxy. The SIP controller is expected to
    send the reply to the user agent that initiated the call.</para>

    <para>After the session has been created, the proxy listens on the ports
    it has allocated for that session and waits for receiving at least one UDP
    packet from each of the two parties participating in the call. Once a
    packet is received, the proxy fills one of two IP:port structures
    associated with respective stream with the source IP:port of that packet.
    When both structures are filled in, the proxy starts relaying UDP packets
    between the parties.</para>

    <para>The rtpproxy tracks idle time for each of existing sessions (i.e.
    time interval within which there were no packets relayed), and
    automatically cleans up a sessions whose idle times exceed the idle time
    (60 seconds by default).</para>
  </refsect1>

  <refsect1>
    <title>FILES</title>

    <para><filename path="/usr/bin">rtpproxy</filename></para>

    <para><filename path="/usr/bin">makeann</filename></para>

    <para><filename path="/usr/bin">extractaudio</filename></para>
  </refsect1>

  <refsect1>
    <title>LICENSE</title>

    <para>All components of the rtpproxy are licensed under the BSD 2-Clause
    License. See <filename>LICENSE</filename> file in the top of source tree
    for details.</para>
  </refsect1>

  <refsect1>
    <title>AVAILABILITY</title>

    <para>The latest version of this program and its components can be found
    at <ulink
    url="http://www.rtpproxy.org/">http://www.rtpproxy.org/</ulink>.</para>
  </refsect1>
</refentry>
